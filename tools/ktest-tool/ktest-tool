#!/usr/bin/env python2.7

# ===-- ktest-tool --------------------------------------------------------===##
# 
#                      The KLEE Symbolic Virtual Machine
# 
#  This file is distributed under the University of Illinois Open Source
#  License. See LICENSE.TXT for details.
# 
# ===----------------------------------------------------------------------===##

import os
import struct
import sys

version_no=3

class KTestError(Exception):
    pass

class KTest:
    @staticmethod
    def fromfile(path):
        if not os.path.exists(path):
            print("ERROR: file %s not found" % (path))
            sys.exit(1)
            
        f = open(path,'rb')
        hdr = f.read(5)
        if len(hdr)!=5 or (hdr!=b'KTEST' and hdr != b"BOUT\n"):
            raise KTestError('unrecognized file')
        version, = struct.unpack('>i', f.read(4))
        if version > version_no:
            raise KTestError('unrecognized version')
        numArgs, = struct.unpack('>i', f.read(4))
        args = []
        for i in range(numArgs):
            size, = struct.unpack('>i', f.read(4))
            args.append(str(f.read(size).decode(encoding='ascii')))
            
        if version >= 2:
            symArgvs, = struct.unpack('>i', f.read(4))
            symArgvLen, = struct.unpack('>i', f.read(4))
        else:
            symArgvs = 0
            symArgvLen = 0

        numObjects, = struct.unpack('>i', f.read(4))
        objects = []
        for i in range(numObjects):
            size, = struct.unpack('>i', f.read(4))
            name = f.read(size)
            size, = struct.unpack('>i', f.read(4))
            bytes = f.read(size)
            objects.append( (name,bytes) )

        # Create an instance
        b = KTest(version, args, symArgvs, symArgvLen, objects)
        # Augment with extra filename field
        b.filename = path
        return b

    def tofile(self, path):
        f = open(path, 'wb')
        f.write('KTEST')
        f.write(struct.pack('>i', version_no))
        f.write(struct.pack('>i', len(self.args))) 
        for a in self.args:
            f.write(struct.pack('>i', len(a)))
            f.write(a.encode(encoding='ascii'))

        f.write(struct.pack('>i', self.symArgvs))
        f.write(struct.pack('>i', self.symArgvLen))
        f.write(struct.pack('>i', len(self.objects)))
        for (objectname,objectbytes) in self.objects:
            f.write(struct.pack('>i', len(objectname)))
            f.write(objectname.encode(encoding='ascii'))
            f.write(struct.pack('>i', len(objectbytes)))
            f.write(objectbytes)
        f.close()

    def __init__(self, version, args, symArgvs, symArgvLen, objects):
        self.version = version
        self.symArgvs = symArgvs
        self.symArgvLen = symArgvLen
        self.args = args
        self.objects = objects

        # add a field that represents the name of the program used to
        # generate this .ktest file:
        program_full_path = self.args[0]
        program_name = os.path.basename(program_full_path)
        # sometimes program names end in .bc, so strip them
        if program_name.endswith('.bc'):
          program_name = program_name[:-3]
        self.programName = program_name
        
def trimZeros(s):
    for i in range(len(s))[::-1]:
        if s[i] != '\x00':
            return s[:i+1]
    return ''
    
def main(args):
    from argparse import ArgumentParser
    parser = ArgumentParser('ktest-tool')
    parser.add_argument('--trim-zeros', dest='trimZeros', action='store_true', 
                        default=False,
                        help='trim trailing zeros')
    parser.add_argument('--write-ints', dest='writeInts', action='store_true',
                        default=False,
                        help='convert 4-byte sequences to integers')
    parser.add_argument('--create-new-file', dest='createNewFile', 
                        action='store_true', default=False,
                        help="create new ktest file from scratch")
    parser.add_argument('--ktest-arg', action='append', dest='arg')
    parser.add_argument('--ktest-object-name', action='append', dest='oname')
    parser.add_argument('--ktest-object-data', action='append', dest='odata')
    parser.add_argument('--ktest-symbolic-argv', type=int, default=0, dest='sargv')
    parser.add_argument('--ktest-symbolic-argv-len', type=int, default=0, dest='sargvlen')
    parser.add_argument('files', action='append')
    args = parser.parse_args()
    if not args:
        op.error("incorrect number of arguments")

    if args.createNewFile:
        objects = zip(args.oname, [open(b, 'rb').read() for b in args.odata])
        b = KTest(version_no, args.arg, args.sargv, args.sargvlen, objects)
        b.tofile(args.files[0])
    else:
        for f in args.files:
            b = KTest.fromfile(f)
            pos = 0
            print('ktest file : %r' % f)
            print('args       : %r' % b.args)
            print('num objects: %r' % len(b.objects))
            for i,(name,data) in enumerate(b.objects):
                if args.trimZeros:
                    str = trimZeros(data)
                else:
                    str = data

                print('object %4d: name: %r' % (i, name))
                print('object %4d: size: %r' % (i, len(data)))
                if args.writeInts and len(data) == 4: 
                    print('object %4d: data: %r' % (i, struct.unpack('i',str)[0]))
                else:
                    print('object %4d: data: %r' % (i, str))
            if f != args.files[-1]:
                print()

if __name__=='__main__':
    main(sys.argv)
